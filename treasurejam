
class CodeJamRunner(object):

    def execute(self):
        with open('%s-%s.in' % (self.problem_name,self.problem_size)) as f:
            case_count = int(f.readline())
            case =0
            results = []
            while case<case_count:
                results.append(self.execute_case(self.get_case_data(f)))

                case += 1

        with open('%s-%s.out' %
                           (self.problem_name,
                            self.problem_size), 'w') as output:
             for i, result in enumerate(results):
                 output.write('Case #%s: %s\n' % (i+1, result))


class Chest(object):

    def __init__(self, number, data):
        self.number = number
        data = [int(x) for x in data.trim().split(' ')]
        self.lock_type = data[0]
        if data[1] >0:
            self.keys = data[2:]
        else:
            self.keys = []

        if self.lock_type in self.keys:
            self.neutral = True
        else:
            self.neutral = False

    def key_count():
        return len(self.keys)
        

class TreasureJam(CodeJamRunner):
    problem_name = 'D'
    problem_size = 'small-attempt1'
    
    def get_case_data(self, f):
        level_count = int(f.readline())
        levels = []
        while level_count >0:
            level_count -=1
            level = [int(x) for x in f.readline().split(' ')]
            level.append(0)
            levels.append(level)
        return levels

        
    def execute_case(self, levels):
        pass

    def test(self):
       c = Chest(1, '1 1 1')
       assert c.number = 1
       assert c.key_count() == 1
       assert c.neutral == True
       assert c.lock_type == 1
       
       c = Chest(4, '3 2 1 5')
       assert c.number = 4
       assert c.key_count() == 2
       assert c.neutral == False
       assert c.lock_type == 3
       assert 1 in c.keys
       assert 5 in c.keys

       print 'Tests passed'

if __name__ == '__main__':
    tdj = TreasureJam()
    tdj.test()
    tdj.execute()

